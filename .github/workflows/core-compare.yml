name: Compare core files hashes across multiple modules

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      hash_algorithm:
        description: 'Hash algorithm to use (md5, sha1, sha256, sha512)'
        required: true
        default: 'sha256'
        type: choice
        options:
          - md5
          - sha1
          - sha256
          - sha512
  pull_request:
  push:
    branches:
      - "main"

jobs:
  compare:
    name: Compare all core files across multiple modules
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        comparison:
          - {
              name: "Redis files",
              file1: "src/services/redis.py",
              file2: "f-locations/src/redis.py",
              start_line_no: 9,
            }
          - {
              name: "Lua.Hset.All",
              file1: "src/lua/hset/all.lua",
              file2: "f-locations/lua/hset/all.lua",
            }
          - {
              name: "Lua.Hset.Clear",
              file1: "src/lua/hset/clear.lua",
              file2: "f-locations/lua/hset/clear.lua",
            }
          - {
              name: "Lua.Hset.Latest",
              file1: "src/lua/hset/latest.lua",
              file2: "f-locations/lua/hset/latest.lua",
            }
          - {
              name: "Lua.Hset.Size",
              file1: "src/lua/hset/size.lua",
              file2: "f-locations/lua/hset/size.lua",
            }
          - {
              name: "Lua.Hset.WriteOne",
              file1: "src/lua/hset/write_one.lua",
              file2: "f-locations/lua/hset/write_one.lua",
            }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Compare file hashes - ${{ matrix.comparison.name }}
        id: compare
        run: |
          # Default values for start and end lines if not specified
          START_LINE="${{ matrix.comparison.start_line_no || 0 }}"
          END_LINE="${{ matrix.comparison.end_line_no || 0 }}"
          
          # Check if files exist
          if [ ! -f "${{ matrix.comparison.file1 }}" ]; then
            echo "Error: ${{ matrix.comparison.file1 }} does not exist"
            exit 1
          fi
          
          if [ ! -f "${{ matrix.comparison.file2 }}" ]; then
            echo "Error: ${{ matrix.comparison.file2 }} does not exist"
            exit 1
          fi
          
          # Create temporary files for the extracted sections
          TEMP_FILE1=$(mktemp)
          TEMP_FILE2=$(mktemp)
          
          # Extract sections based on line numbers
          if [ "$START_LINE" -eq 0 ] && [ "$END_LINE" -eq 0 ]; then
            # Compare whole files
            cp "${{ matrix.comparison.file1 }}" "$TEMP_FILE1"
            cp "${{ matrix.comparison.file2 }}" "$TEMP_FILE2"
            SECTION_DESC="entire file"
          elif [ "$START_LINE" -gt 0 ] && [ "$END_LINE" -eq 0 ]; then
            # From start line to end of file
            tail -n +$START_LINE "${{ matrix.comparison.file1 }}" > "$TEMP_FILE1"
            tail -n +$START_LINE "${{ matrix.comparison.file2 }}" > "$TEMP_FILE2"
            SECTION_DESC="lines $START_LINE to EOF"
          elif [ "$START_LINE" -eq 0 ] && [ "$END_LINE" -gt 0 ]; then
            # From beginning to end line
            head -n $END_LINE "${{ matrix.comparison.file1 }}" > "$TEMP_FILE1"
            head -n $END_LINE "${{ matrix.comparison.file2 }}" > "$TEMP_FILE2"
            SECTION_DESC="lines 1 to $END_LINE"
          else
            # From start line to end line
            LINES_TO_EXTRACT=$((END_LINE - START_LINE + 1))
            tail -n +$START_LINE "${{ matrix.comparison.file1 }}" | head -n $LINES_TO_EXTRACT > "$TEMP_FILE1"
            tail -n +$START_LINE "${{ matrix.comparison.file2 }}" | head -n $LINES_TO_EXTRACT > "$TEMP_FILE2"
            SECTION_DESC="lines $START_LINE to $END_LINE"
          fi
          
          # Calculate hashes of the extracted sections
          HASH1=$(${HASH_CMD} "$TEMP_FILE1" | awk '{ print $1 }')
          HASH2=$(${HASH_CMD} "$TEMP_FILE2" | awk '{ print $1 }')
          
          # Output comparison details
          echo "Comparison: ${{ matrix.comparison.name }} ($SECTION_DESC)"
          echo "File 1: ${{ matrix.comparison.file1 }}"
          echo "File 2: ${{ matrix.comparison.file2 }}"
          echo "Hash of file1 section: $HASH1"
          echo "Hash of file2 section: $HASH2"
          
          # Clean up temp files
          rm "$TEMP_FILE1" "$TEMP_FILE2"
          
          # Compare hashes
          if [ "$HASH1" = "$HASH2" ]; then
            echo "✅ File sections have matching hashes"
            echo "match=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Section hashes do not match"
            echo "match=false" >> $GITHUB_OUTPUT

            # Display diff for debugging (optional)
            if [ "$START_LINE" -eq 0 ] && [ "$END_LINE" -eq 0 ]; then
              diff -u "${{ matrix.comparison.file1 }}" "${{ matrix.comparison.file2 }}" || true
            else
              echo "To see the difference, check the specified sections in the files"
            fi
            
            exit 1  # Fail this specific matrix job
          fi
        env:
          HASH_CMD: ${{ github.event.inputs.hash_algorithm }}sum
  summary:
    name: Summarize comparison results
    runs-on: ubuntu-latest
    needs: compare
    if: always()
    steps:
      - name: Summarize results
        run: |
          echo "# File Section Comparison Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Algorithm used: ${{ github.event.inputs.hash_algorithm }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ contains(needs.compare.result, 'failure') }}" = "true" ]; then
            echo "❌ Some file section comparisons failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All file section comparisons succeeded" >> $GITHUB_STEP_SUMMARY
          fi
