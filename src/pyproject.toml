[tool.poetry]
name = "Matvey Ivanov Website"
version = "0.1.0"
description = ""
authors = []
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "0.115.12"
pydantic = "2.8.2"
uvicorn = "0.30.5"
json-log-formatter = "1.0"
concurrent-log-handler = "0.9.25"
httpx = "0.27.2"
jinja2 = "3.1.4"
python-dateutil = "^2.9.0.post0"
sse-starlette = "2.3.5"
redis = "6.1.0"
dependency-injector = "^4.46.0"
boto3 = "1.38.20"
pytz = "^2025.2"
aiofiles = "24.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "8.2.1"
pytest-cov = "5.0.0"
pytest-mock = "3.14.0"
pytest-timeout = "2.3.1"
pytest-asyncio = "0.23.5"
flake8 = "7.1.0"
black = "24.4.2"
pre-commit = "3.7.1"
isort = "5.13.2"
pyrefly = "^0.17.1"
mypy = "^1.16.0"
ruff = "^0.11.12"
ipinfo = "^5.1.1"
types-pytz = "^2025.2.0.20250516"
types-python-dateutil = "^2.9.0.20250516"
types-boto3 = "1.38.20"
types-boto3-sqs = "1.38.0"

[tool.pytest.ini_options]
python_files = "test_*.py"
addopts = [
    "-v",
    "-rfxP",
    "--cov",
    "--log-level=CRITICAL",
]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]
omit = [
    "*conftest.py",
    "*models.py",
    "*apps.py",
    "*urls.py",
    "*schema.py",
    "*admin.py",
    "*forms.py",
    "*filters.py",
    "*interfaces.py",
    "*utils/tests.py",
    "*utils/serializers.py",
    "*utils/pagination.py",
    "*utils/openapi_examples.py",
    "*utils/exceptions.py",
    "*utils/admin.py",
    "*__init__*",
    "*/config/*",
    "*/migrations/*",
    "*/tests/*",
    "*/views/*",
]

[tool.black]
exclude = '''
    migrations
    | .venv
'''

[tool.isort]
profile = "black"
skip_glob = [

]
py_version = 312
line_length = 88
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER"
]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 88
indent-width = 4
target-version = "py313"
output-format = "full"
respect-gitignore = true

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F"]
ignore = []
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 88

[tool.mypy]
python_version = "3.13"
exclude = [
    "tests",
    "di\\.py",
]
plugins = [
    
]
mypy_path = "../f-locations/stubs"
ignore_missing_imports = false
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
implicit_reexport = true
extra_checks = true
strict_equality = true
show_error_context = true
show_column_numbers = false
show_error_code_links = true
pretty = true
color_output = true
error_summary = true
force_uppercase_builtins = true
force_union_syntax = false

[tool.pyrefly]
project_excludes = [
    "tests/**",
    "di\\.py",
]
python_platform = "linux"
python_version = "3.13"
ignore_missing_source = true
untyped_def_behaviour = "check-and-infer-return-type"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
